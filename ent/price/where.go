// Code generated by ent, DO NOT EDIT.

package price

import (
	"baseProject/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldProductID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStoreID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPrice, v))
}

// RecordedAt applies equality check predicate on the "recorded_at" field. It's identical to RecordedAtEQ.
func RecordedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldRecordedAt, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldProductID, vs...))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldStoreID, vs...))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldPrice, v))
}

// RecordedAtEQ applies the EQ predicate on the "recorded_at" field.
func RecordedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldRecordedAt, v))
}

// RecordedAtNEQ applies the NEQ predicate on the "recorded_at" field.
func RecordedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldRecordedAt, v))
}

// RecordedAtIn applies the In predicate on the "recorded_at" field.
func RecordedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldRecordedAt, vs...))
}

// RecordedAtNotIn applies the NotIn predicate on the "recorded_at" field.
func RecordedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldRecordedAt, vs...))
}

// RecordedAtGT applies the GT predicate on the "recorded_at" field.
func RecordedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldRecordedAt, v))
}

// RecordedAtGTE applies the GTE predicate on the "recorded_at" field.
func RecordedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldRecordedAt, v))
}

// RecordedAtLT applies the LT predicate on the "recorded_at" field.
func RecordedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldRecordedAt, v))
}

// RecordedAtLTE applies the LTE predicate on the "recorded_at" field.
func RecordedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldRecordedAt, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(sql.NotPredicates(p))
}
