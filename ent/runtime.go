// Code generated by ent, DO NOT EDIT.

package ent

import (
	"baseProject/ent/price"
	"baseProject/ent/product"
	"baseProject/ent/review"
	"baseProject/ent/schema"
	"baseProject/ent/store"
	"baseProject/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	priceFields := schema.Price{}.Fields()
	_ = priceFields
	// priceDescRecordedAt is the schema descriptor for recorded_at field.
	priceDescRecordedAt := priceFields[4].Descriptor()
	// price.DefaultRecordedAt holds the default value on creation for the recorded_at field.
	price.DefaultRecordedAt = priceDescRecordedAt.Default.(func() time.Time)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[1].Descriptor()
	// product.NameValidator is a validator for the "name" field. It is called by the builders before save.
	product.NameValidator = productDescName.Validators[0].(func(string) error)
	// productDescDescription is the schema descriptor for description field.
	productDescDescription := productFields[2].Descriptor()
	// product.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	product.DescriptionValidator = productDescDescription.Validators[0].(func(string) error)
	// productDescCategory is the schema descriptor for category field.
	productDescCategory := productFields[3].Descriptor()
	// product.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	product.CategoryValidator = productDescCategory.Validators[0].(func(string) error)
	// productDescCreatedAt is the schema descriptor for createdAt field.
	productDescCreatedAt := productFields[4].Descriptor()
	// product.DefaultCreatedAt holds the default value on creation for the createdAt field.
	product.DefaultCreatedAt = productDescCreatedAt.Default.(func() time.Time)
	reviewFields := schema.Review{}.Fields()
	_ = reviewFields
	// reviewDescRating is the schema descriptor for rating field.
	reviewDescRating := reviewFields[3].Descriptor()
	// review.RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	review.RatingValidator = func() func(float64) error {
		validators := reviewDescRating.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(rating float64) error {
			for _, fn := range fns {
				if err := fn(rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// reviewDescCreatedAt is the schema descriptor for created_at field.
	reviewDescCreatedAt := reviewFields[5].Descriptor()
	// review.DefaultCreatedAt holds the default value on creation for the created_at field.
	review.DefaultCreatedAt = reviewDescCreatedAt.Default.(time.Time)
	storeFields := schema.Store{}.Fields()
	_ = storeFields
	// storeDescName is the schema descriptor for name field.
	storeDescName := storeFields[1].Descriptor()
	// store.NameValidator is a validator for the "name" field. It is called by the builders before save.
	store.NameValidator = storeDescName.Validators[0].(func(string) error)
	// storeDescLocation is the schema descriptor for location field.
	storeDescLocation := storeFields[2].Descriptor()
	// store.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	store.LocationValidator = storeDescLocation.Validators[0].(func(string) error)
	// storeDescCity is the schema descriptor for city field.
	storeDescCity := storeFields[3].Descriptor()
	// store.CityValidator is a validator for the "city" field. It is called by the builders before save.
	store.CityValidator = storeDescCity.Validators[0].(func(string) error)
	// storeDescCreatedAt is the schema descriptor for created_at field.
	storeDescCreatedAt := storeFields[9].Descriptor()
	// store.DefaultCreatedAt holds the default value on creation for the created_at field.
	store.DefaultCreatedAt = storeDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[5].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
