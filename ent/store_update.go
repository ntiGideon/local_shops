// Code generated by ent, DO NOT EDIT.

package ent

import (
	"baseProject/ent/predicate"
	"baseProject/ent/price"
	"baseProject/ent/product"
	"baseProject/ent/review"
	"baseProject/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks    []Hook
	mutation *StoreMutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StoreUpdate) SetName(s string) *StoreUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StoreUpdate) SetNillableName(s *string) *StoreUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetLocation sets the "location" field.
func (su *StoreUpdate) SetLocation(s string) *StoreUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLocation(s *string) *StoreUpdate {
	if s != nil {
		su.SetLocation(*s)
	}
	return su
}

// SetCity sets the "city" field.
func (su *StoreUpdate) SetCity(s string) *StoreUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCity(s *string) *StoreUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetCountry sets the "country" field.
func (su *StoreUpdate) SetCountry(s string) *StoreUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCountry(s *string) *StoreUpdate {
	if s != nil {
		su.SetCountry(*s)
	}
	return su
}

// SetZipcode sets the "zipcode" field.
func (su *StoreUpdate) SetZipcode(s string) *StoreUpdate {
	su.mutation.SetZipcode(s)
	return su
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (su *StoreUpdate) SetNillableZipcode(s *string) *StoreUpdate {
	if s != nil {
		su.SetZipcode(*s)
	}
	return su
}

// ClearZipcode clears the value of the "zipcode" field.
func (su *StoreUpdate) ClearZipcode() *StoreUpdate {
	su.mutation.ClearZipcode()
	return su
}

// SetPhoto sets the "photo" field.
func (su *StoreUpdate) SetPhoto(s string) *StoreUpdate {
	su.mutation.SetPhoto(s)
	return su
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (su *StoreUpdate) SetNillablePhoto(s *string) *StoreUpdate {
	if s != nil {
		su.SetPhoto(*s)
	}
	return su
}

// ClearPhoto clears the value of the "photo" field.
func (su *StoreUpdate) ClearPhoto() *StoreUpdate {
	su.mutation.ClearPhoto()
	return su
}

// SetLatitude sets the "latitude" field.
func (su *StoreUpdate) SetLatitude(f float64) *StoreUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLatitude(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *StoreUpdate) AddLatitude(f float64) *StoreUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// ClearLatitude clears the value of the "latitude" field.
func (su *StoreUpdate) ClearLatitude() *StoreUpdate {
	su.mutation.ClearLatitude()
	return su
}

// SetLongitude sets the "longitude" field.
func (su *StoreUpdate) SetLongitude(f float64) *StoreUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLongitude(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *StoreUpdate) AddLongitude(f float64) *StoreUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// ClearLongitude clears the value of the "longitude" field.
func (su *StoreUpdate) ClearLongitude() *StoreUpdate {
	su.mutation.ClearLongitude()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StoreUpdate) SetCreatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCreatedAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (su *StoreUpdate) AddProductIDs(ids ...int) *StoreUpdate {
	su.mutation.AddProductIDs(ids...)
	return su
}

// AddProducts adds the "products" edges to the Product entity.
func (su *StoreUpdate) AddProducts(p ...*Product) *StoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProductIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (su *StoreUpdate) AddPriceIDs(ids ...int) *StoreUpdate {
	su.mutation.AddPriceIDs(ids...)
	return su
}

// AddPrices adds the "prices" edges to the Price entity.
func (su *StoreUpdate) AddPrices(p ...*Price) *StoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPriceIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (su *StoreUpdate) AddReviewIDs(ids ...int) *StoreUpdate {
	su.mutation.AddReviewIDs(ids...)
	return su
}

// AddReviews adds the "reviews" edges to the Review entity.
func (su *StoreUpdate) AddReviews(r ...*Review) *StoreUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddReviewIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (su *StoreUpdate) ClearProducts() *StoreUpdate {
	su.mutation.ClearProducts()
	return su
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (su *StoreUpdate) RemoveProductIDs(ids ...int) *StoreUpdate {
	su.mutation.RemoveProductIDs(ids...)
	return su
}

// RemoveProducts removes "products" edges to Product entities.
func (su *StoreUpdate) RemoveProducts(p ...*Product) *StoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProductIDs(ids...)
}

// ClearPrices clears all "prices" edges to the Price entity.
func (su *StoreUpdate) ClearPrices() *StoreUpdate {
	su.mutation.ClearPrices()
	return su
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (su *StoreUpdate) RemovePriceIDs(ids ...int) *StoreUpdate {
	su.mutation.RemovePriceIDs(ids...)
	return su
}

// RemovePrices removes "prices" edges to Price entities.
func (su *StoreUpdate) RemovePrices(p ...*Price) *StoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePriceIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (su *StoreUpdate) ClearReviews() *StoreUpdate {
	su.mutation.ClearReviews()
	return su
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (su *StoreUpdate) RemoveReviewIDs(ids ...int) *StoreUpdate {
	su.mutation.RemoveReviewIDs(ids...)
	return su
}

// RemoveReviews removes "reviews" edges to Review entities.
func (su *StoreUpdate) RemoveReviews(r ...*Review) *StoreUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StoreUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := store.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Store.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Location(); ok {
		if err := store.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Store.location": %w`, err)}
		}
	}
	if v, ok := su.mutation.City(); ok {
		if err := store.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Store.city": %w`, err)}
		}
	}
	return nil
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.SetField(store.FieldLocation, field.TypeString, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(store.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.SetField(store.FieldCountry, field.TypeString, value)
	}
	if value, ok := su.mutation.Zipcode(); ok {
		_spec.SetField(store.FieldZipcode, field.TypeString, value)
	}
	if su.mutation.ZipcodeCleared() {
		_spec.ClearField(store.FieldZipcode, field.TypeString)
	}
	if value, ok := su.mutation.Photo(); ok {
		_spec.SetField(store.FieldPhoto, field.TypeString, value)
	}
	if su.mutation.PhotoCleared() {
		_spec.ClearField(store.FieldPhoto, field.TypeString)
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.SetField(store.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.AddField(store.FieldLatitude, field.TypeFloat64, value)
	}
	if su.mutation.LatitudeCleared() {
		_spec.ClearField(store.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.SetField(store.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.AddField(store.FieldLongitude, field.TypeFloat64, value)
	}
	if su.mutation.LongitudeCleared() {
		_spec.ClearField(store.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProductsIDs(); len(nodes) > 0 && !su.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPricesIDs(); len(nodes) > 0 && !su.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !su.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreMutation
}

// SetName sets the "name" field.
func (suo *StoreUpdateOne) SetName(s string) *StoreUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableName(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetLocation sets the "location" field.
func (suo *StoreUpdateOne) SetLocation(s string) *StoreUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLocation(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetLocation(*s)
	}
	return suo
}

// SetCity sets the "city" field.
func (suo *StoreUpdateOne) SetCity(s string) *StoreUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCity(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetCountry sets the "country" field.
func (suo *StoreUpdateOne) SetCountry(s string) *StoreUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCountry(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetCountry(*s)
	}
	return suo
}

// SetZipcode sets the "zipcode" field.
func (suo *StoreUpdateOne) SetZipcode(s string) *StoreUpdateOne {
	suo.mutation.SetZipcode(s)
	return suo
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableZipcode(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetZipcode(*s)
	}
	return suo
}

// ClearZipcode clears the value of the "zipcode" field.
func (suo *StoreUpdateOne) ClearZipcode() *StoreUpdateOne {
	suo.mutation.ClearZipcode()
	return suo
}

// SetPhoto sets the "photo" field.
func (suo *StoreUpdateOne) SetPhoto(s string) *StoreUpdateOne {
	suo.mutation.SetPhoto(s)
	return suo
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillablePhoto(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetPhoto(*s)
	}
	return suo
}

// ClearPhoto clears the value of the "photo" field.
func (suo *StoreUpdateOne) ClearPhoto() *StoreUpdateOne {
	suo.mutation.ClearPhoto()
	return suo
}

// SetLatitude sets the "latitude" field.
func (suo *StoreUpdateOne) SetLatitude(f float64) *StoreUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLatitude(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *StoreUpdateOne) AddLatitude(f float64) *StoreUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// ClearLatitude clears the value of the "latitude" field.
func (suo *StoreUpdateOne) ClearLatitude() *StoreUpdateOne {
	suo.mutation.ClearLatitude()
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *StoreUpdateOne) SetLongitude(f float64) *StoreUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLongitude(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *StoreUpdateOne) AddLongitude(f float64) *StoreUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// ClearLongitude clears the value of the "longitude" field.
func (suo *StoreUpdateOne) ClearLongitude() *StoreUpdateOne {
	suo.mutation.ClearLongitude()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StoreUpdateOne) SetCreatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCreatedAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (suo *StoreUpdateOne) AddProductIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.AddProductIDs(ids...)
	return suo
}

// AddProducts adds the "products" edges to the Product entity.
func (suo *StoreUpdateOne) AddProducts(p ...*Product) *StoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProductIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (suo *StoreUpdateOne) AddPriceIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.AddPriceIDs(ids...)
	return suo
}

// AddPrices adds the "prices" edges to the Price entity.
func (suo *StoreUpdateOne) AddPrices(p ...*Price) *StoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPriceIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (suo *StoreUpdateOne) AddReviewIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.AddReviewIDs(ids...)
	return suo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (suo *StoreUpdateOne) AddReviews(r ...*Review) *StoreUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddReviewIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (suo *StoreUpdateOne) ClearProducts() *StoreUpdateOne {
	suo.mutation.ClearProducts()
	return suo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (suo *StoreUpdateOne) RemoveProductIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.RemoveProductIDs(ids...)
	return suo
}

// RemoveProducts removes "products" edges to Product entities.
func (suo *StoreUpdateOne) RemoveProducts(p ...*Product) *StoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProductIDs(ids...)
}

// ClearPrices clears all "prices" edges to the Price entity.
func (suo *StoreUpdateOne) ClearPrices() *StoreUpdateOne {
	suo.mutation.ClearPrices()
	return suo
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (suo *StoreUpdateOne) RemovePriceIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.RemovePriceIDs(ids...)
	return suo
}

// RemovePrices removes "prices" edges to Price entities.
func (suo *StoreUpdateOne) RemovePrices(p ...*Price) *StoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePriceIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (suo *StoreUpdateOne) ClearReviews() *StoreUpdateOne {
	suo.mutation.ClearReviews()
	return suo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (suo *StoreUpdateOne) RemoveReviewIDs(ids ...int) *StoreUpdateOne {
	suo.mutation.RemoveReviewIDs(ids...)
	return suo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (suo *StoreUpdateOne) RemoveReviews(r ...*Review) *StoreUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveReviewIDs(ids...)
}

// Where appends a list predicates to the StoreUpdate builder.
func (suo *StoreUpdateOne) Where(ps ...predicate.Store) *StoreUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoreUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := store.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Store.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Location(); ok {
		if err := store.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Store.location": %w`, err)}
		}
	}
	if v, ok := suo.mutation.City(); ok {
		if err := store.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Store.city": %w`, err)}
		}
	}
	return nil
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.SetField(store.FieldLocation, field.TypeString, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(store.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.SetField(store.FieldCountry, field.TypeString, value)
	}
	if value, ok := suo.mutation.Zipcode(); ok {
		_spec.SetField(store.FieldZipcode, field.TypeString, value)
	}
	if suo.mutation.ZipcodeCleared() {
		_spec.ClearField(store.FieldZipcode, field.TypeString)
	}
	if value, ok := suo.mutation.Photo(); ok {
		_spec.SetField(store.FieldPhoto, field.TypeString, value)
	}
	if suo.mutation.PhotoCleared() {
		_spec.ClearField(store.FieldPhoto, field.TypeString)
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.SetField(store.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.AddField(store.FieldLatitude, field.TypeFloat64, value)
	}
	if suo.mutation.LatitudeCleared() {
		_spec.ClearField(store.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.SetField(store.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.AddField(store.FieldLongitude, field.TypeFloat64, value)
	}
	if suo.mutation.LongitudeCleared() {
		_spec.ClearField(store.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !suo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPricesIDs(); len(nodes) > 0 && !suo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PricesTable,
			Columns: []string{store.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !suo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ReviewsTable,
			Columns: []string{store.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
